""" JupyterLab Zenodo : Exporting from JupyterLab to Zenodo """

import glob, json, re, os
from contextlib import contextmanager

from tornado import gen, web

from notebook.base.handlers import APIHandler

#from .config import LatexConfig
#from .util import run_command

class ZenodoUploadHandler(APIHandler):
    """
    A handler that uploads your files to Zenodo
    """
    def initialize(self, notebook_dir):
        self.notebook_dir = notebook_dir

    def zip_dir(notebook_dir, filename):
        """Create zip file filename from notebook_dir
        
        Parameters
        ----------
        notebook_dir : string
            Explicit path to directory to be zipped
        filename : string
            Filename to zip to; must end with '.zip'

        Returns
        -------
        null
            Raises exception on error

        Notes
        -----
        - Error handling incomplete
        """  

        if filename[-4:] != ".zip":
            raise Exception("filename invalid")

        # Go to directly outside work directory
        cmd = "cd "+notebook_dir+"/.."
        os.system(cmd)
        
        # Zip work directory to filename
        cmd = "zip -r "+filename+" "+notebook_dir+"/"
        os.system(cmd) 


    def assemble_metadata(title, authors, description):
        """Turn metadata into a dictionary for Zenodo upload

        Parameters
        ----------
        title : string
        authors : list of strings
        description : string

        Returns
        -------
        dictionary
            Dictionary fields are left empty if not provided

        """
        # Turn list of author strings into list of author dictionaries
        creator_list = []
        for author in authors:
            creator_list.append({'name': author, 'affiliation': 'Chameleon Cloud'})

        metadata = {}
        metadata['title'] = title 
        metadata['upload_type'] = 'publication' 
        matadata['publication_type'] = 'working_paper'
        metadata['description'] = description 
        metadata['creators'] = creator_list 
        return metadata

    def upload_file(filename, path_to_file, metadata):
        """Upload the given file at the given path to Zenodo
           Add included metadata

        Parameters
        ----------
        filename : string
            File to be uploaded to zenodo
        path_to_file : string
            Path to the above file (including file name)
        metadata : dictionary
            As generated by assemble_metadata()

        Returns
        -------
        string
            Doi of successfully uploaded deposition
                
        Notes
        -----
        - Does not yet have ANY error handling
    
        """

        headers = {"Content-Type": "application/json"}
        # Create deposition
        r = requests.post('https://zenodo.org/api/deposit/depositions',
                          params={'access_token': ACCESS_TOKEN}, json={},
                          headers=headers)
        deposition_id = r.json()['id']
        data = {'filename': filename}
        files = {'file': open(path_to_file, 'rb')}
        r = requests.post('https://zenodo.org/api/deposit/depositions/%s/files' % deposition_id,
                          params={'access_token': ACCESS_TOKEN}, data=data,
                          files=files)
        r = requests.put('https://zenodo.org/api/deposit/depositions/%s' % deposition_id,
                         params={'access_token': ACCESS_TOKEN}, 
                         data=json.dumps({'metadata': metadata}),
                         headers=headers)
        doi = r.json().get('doi', None) 
        return doi

    @web.authenticated
    @gen.coroutine
    # MK: should this be post?
    def post(self, path=''):
        #file_prefix='', title='', authors=[], description=""):
        """
        Takes in a a file prefix string, and metadata
        Zips notebook_dir to file_prefix.zip, uploads to Zenodo
        Returns dictionary with status (success or failure) and doi (if successful)
        """
        if file_prefix == '':
            file_prefix = 'workingdir.zip'

        filename = file_prefix + ".zip"

        zip_dir(self.notebook_dir, filename)

        path_to_file = notebook_dir + "/.."
        metadata = self.assemble_data(title, authors, description)

        doi = upload_file(filename, path_to_file, metadata) 
        if (doi is not None):
            return ({'status':'success', 'doi': doi})
        else:
            return ({'status':'failure'})
        # return upload_id
        
